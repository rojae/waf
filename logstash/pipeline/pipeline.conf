input {
  kafka {
    bootstrap_servers => "kafka:9092"
    topics            => ["waf-logs"]
    group_id          => "ls-waf-jso-2"
    auto_offset_reset => "earliest"
    codec             => "json"
  }
}

filter {
  # (선택) 필드 alias 정리
  mutate {
    rename => { "[transaction][request][uri]" => "[modsec][uri]" }
    rename => { "[transaction][client_ip]"    => "[modsec][client_ip]" }
    rename => { "[transaction][response][http_code]" => "[modsec][status]" }
    remove_field => ["agent","ecs","host","log","input","tags","@version"]
  }

  if [@metadata][topic] == "waf-logs" and [ts] {
    date {
      match    => ["ts","ISO8601"]
      target   => "@timestamp"
      timezone => "UTC"
    }
  }
  
  # Opt, When needmodify `@timestamp`
  # if [transaction][time] {
  #   date { match => [ "[transaction][time]", "ISO8601","UNIX_MS","UNIX" ]
  #          target => "@timestamp" timezone => "UTC" }
  # }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "waf-logs-%{+YYYY.MM.dd}"
    ilm_enabled => false
  }
  stdout { codec => rubydebug }
}

############################################################################
# kafka multiple key.. (for data-pipeline)
############################################################################

# input {
#   kafka {
#     bootstrap_servers => "kafka:9092"
#     topics            => ["waf-logs","waf-modsec-enriched","waf-modsec-metrics"]
#     group_id          => "ls-waf"
#     consumer_threads  => 3
#     auto_offset_reset => "earliest"
#     decorate_events   => true
#     codec             => json
#   }
# }

# filter {
#   # 토픽 구분
#   if [@metadata][kafka][topic] {
#     mutate { add_field => { "[@metadata][topic]" => "%{[@metadata][kafka][topic]}" } }
#   } else if [kafka][topic] {
#     mutate { add_field => { "[@metadata][topic]" => "%{[kafka][topic]}" } }
#   }

#   # 공통 ECS 매핑(가능한 범위)
#   mutate {
#     convert => { "status" => "integer" "anomalyScore" => "integer" }
#     rename  => { "tenant_id" => "[labels][tenant]" }
#   }

#   # 타임스탬프
#   if [@metadata][topic] == "waf-logs" and [ts] {
#     date {
#       match    => ["ts","ISO8601"]
#       target   => "@timestamp"
#       timezone => "UTC"
#     }
#   } else if [@metadata][topic] == "waf-modsec-enriched" and [ts] {
#     date {
#       match    => ["ts","ISO8601"]
#       target   => "@timestamp"
#       timezone => "UTC"
#     }
#   } else if [@metadata][topic] == "waf-modsec-metrics" and [window_start] {
#     date {
#       match    => ["window_start","ISO8601","yyyy-MM-dd HH:mm:ss","UNIX_MS"]
#       target   => "@timestamp"
#       timezone => "UTC"
#     }
#   }

#   # ENRICHED/RAW에 한해 상세 필드 정리
#   if [@metadata][topic] in ["waf-logs","waf-modsec-enriched"] {
#     mutate {
#       rename => {
#         "srcIp_masked" => "[source][ip]"   # ENRICHED에만 있을 수 있음(없어도 에러X)
#         "ruleId"       => "[rule][id]"
#         "msg"          => "message"
#         "host"         => "[url][domain]"
#         "uri"          => "[url][path]"
#       }
#       add_field => {
#         "[event][category]" => "intrusion_detection"
#         "[event][kind]"     => "event"
#         "[observer][type]"  => "waf"
#         "[observer][name]"  => "nginx-modsecurity"
#       }
#     }
#   }

#   # etc fields
#   mutate { remove_field => ["@version","kafka","log","host","agent"] }
# }

# output {
#   if [@metadata][topic] == "waf-logs" {
#     elasticsearch {
#       hosts        => ["http://elasticsearch:9200"]
#       index        => "waf-logs-%{+YYYY.MM.dd}"
#       ilm_enabled  => false
#     }
#   } else if [@metadata][topic] == "waf-modsec-enriched" {
#     elasticsearch {
#       hosts        => ["http://elasticsearch:9200"]
#       index        => "waf-modsec-enriched-%{+YYYY.MM.dd}"
#       ilm_enabled  => false
#     }
#   } else if [@metadata][topic] == "waf-modsec-metrics" {
#     elasticsearch {
#       hosts        => ["http://elasticsearch:9200"]
#       index        => "waf-modsec-metrics-%{+YYYY.MM.dd}"
#       ilm_enabled  => false
#     }
#   }
#   stdout { codec => rubydebug }
# }