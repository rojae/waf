---
# WAF Dashboard API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waf-dashboard-api
  namespace: waf-system
  labels:
    app: waf-dashboard-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: waf-dashboard-api
  template:
    metadata:
      labels:
        app: waf-dashboard-api
    spec:
      initContainers:
      - name: wait-for-elasticsearch
        image: curlimages/curl:8.4.0
        command:
        - /bin/sh
        - -c
        - |
          until curl -f http://elasticsearch.waf-data.svc.cluster.local:9200/_cluster/health >/dev/null 2>&1; do
            echo "Waiting for Elasticsearch..."
            sleep 10
          done
          echo "Elasticsearch is ready!"
      - name: wait-for-influxdb
        image: curlimages/curl:8.4.0
        command:
        - /bin/sh
        - -c
        - |
          until curl -f http://influxdb.waf-data.svc.cluster.local:8086/ping >/dev/null 2>&1; do
            echo "Waiting for InfluxDB..."
            sleep 10
          done
          echo "InfluxDB is ready!"
      containers:
      - name: waf-dashboard-api
        image: waf-dashboard-api:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8082
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: ELASTICSEARCH_URIS
          value: "http://elasticsearch.waf-data.svc.cluster.local:9200"
        - name: INFLUXDB_URL
          value: "http://influxdb.waf-data.svc.cluster.local:8086"
        - name: INFLUXDB_TOKEN
          valueFrom:
            configMapKeyRef:
              name: influxdb-config
              key: influxdb-token
        - name: INFLUXDB_ORG
          valueFrom:
            configMapKeyRef:
              name: influxdb-config
              key: influxdb-org
        - name: INFLUXDB_BUCKET
          valueFrom:
            configMapKeyRef:
              name: influxdb-config
              key: influxdb-bucket
        - name: GRAFANA_URL
          value: "http://grafana.waf-monitoring.svc.cluster.local:3000"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka.waf-processing.svc.cluster.local:9092"
        - name: CORS_ALLOWED_ORIGINS
          value: "${OAUTH_CALLBACK_BASE_URL}"
        volumeMounts:
        - name: custom-rules
          mountPath: /app/custom-rules
        - name: modsec-rules
          mountPath: /app/modsecurity-rules
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # Disabled health checks until actuator endpoint is configured
        # livenessProbe:
        #   httpGet:
        #     path: /actuator/health
        #     port: 8082
        #   initialDelaySeconds: 60
        #   periodSeconds: 30
        # readinessProbe:
        #   httpGet:
        #     path: /actuator/health
        #     port: 8082
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
      volumes:
      - name: custom-rules
        persistentVolumeClaim:
          claimName: waf-custom-rules-pvc
      - name: modsec-rules
        hostPath:
          path: /Users/jaeseoh/Documents/workspace/waf/nginx/modsecurity/rules
          type: Directory

---
# WAF Dashboard API Service
apiVersion: v1
kind: Service
metadata:
  name: waf-dashboard-api
  namespace: waf-system
  labels:
    app: waf-dashboard-api
spec:
  type: ClusterIP
  ports:
  - port: 8082
    targetPort: 8082
    protocol: TCP
  selector:
    app: waf-dashboard-api

---
# WAF Dashboard API NodePort
apiVersion: v1
kind: Service
metadata:
  name: waf-dashboard-api-nodeport
  namespace: waf-system
  labels:
    app: waf-dashboard-api
spec:
  type: NodePort
  ports:
  - port: 8082
    targetPort: 8082
    nodePort: 30082
    protocol: TCP
  selector:
    app: waf-dashboard-api

---
# WAF Social API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waf-social-api
  namespace: waf-system
  labels:
    app: waf-social-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: waf-social-api
  template:
    metadata:
      labels:
        app: waf-social-api
    spec:
      containers:
      - name: waf-social-api
        image: waf-social-api:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8081
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: google-client-id
              optional: true
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: google-client-secret
              optional: true
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: jwt-secret
        - name: COOKIE_DOMAIN
          value: "${DOMAIN}"
        - name: GOOGLE_OAUTH_REDIRECT_URI
          value: "${OAUTH_CALLBACK_BASE_URL}/login/oauth2/code/google"
        - name: OAUTH_CALLBACK_BASE_URL
          value: "${OAUTH_CALLBACK_BASE_URL}"
        - name: OAUTH_DEFAULT_REDIRECT_URL
          value: "${OAUTH_CALLBACK_BASE_URL}/dashboard"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
# Disabled health checks to prevent restart loops
        # livenessProbe:
        #   httpGet:
        #     path: /health
        #     port: 8081
        #   initialDelaySeconds: 60
        #   periodSeconds: 30
        # readinessProbe:
        #   httpGet:
        #     path: /health
        #     port: 8081
        #   initialDelaySeconds: 30
        #   periodSeconds: 10

---
# WAF Social API Service
apiVersion: v1
kind: Service
metadata:
  name: waf-social-api
  namespace: waf-system
  labels:
    app: waf-social-api
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: waf-social-api

---
# WAF Social API NodePort
apiVersion: v1
kind: Service
metadata:
  name: waf-social-api-nodeport
  namespace: waf-system
  labels:
    app: waf-social-api
spec:
  type: NodePort
  ports:
  - port: 8081
    targetPort: 8081
    nodePort: 30081
    protocol: TCP
  selector:
    app: waf-social-api

---
# WAF Frontend Deployment (align with Dockerfile.dev on port 3001)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waf-frontend
  namespace: waf-system
  labels:
    app: waf-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: waf-frontend
  template:
    metadata:
      labels:
        app: waf-frontend
    spec:
      containers:
      - name: waf-frontend
        image: waf-frontend:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: PORT
          value: "3001"
        - name: NEXTAUTH_URL
          value: "http://localhost:3001"
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: nextauth-secret
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: google-client-id
              optional: true
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: google-client-secret
              optional: true
        - name: SOCIAL_API_URL
          value: "http://waf-social-api.waf-system.svc.cluster.local:8081"
        - name: DASHBOARD_API_URL
          value: "http://waf-dashboard-api.waf-system.svc.cluster.local:8082"
        - name: NEXT_PUBLIC_SOCIAL_API_URL
          value: "${OAUTH_CALLBACK_BASE_URL}"
        - name: NEXT_PUBLIC_GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: waf-auth-secrets
              key: google-client-id
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5

---
# WAF Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: waf-frontend
  namespace: waf-system
  labels:
    app: waf-frontend
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
  selector:
    app: waf-frontend

---
# WAF Frontend NodePort
apiVersion: v1
kind: Service
metadata:
  name: waf-frontend-nodeport
  namespace: waf-system
  labels:
    app: waf-frontend
spec:
  type: NodePort
  ports:
  - port: 3001
    targetPort: 3001
    nodePort: 30301
    protocol: TCP
  selector:
    app: waf-frontend
